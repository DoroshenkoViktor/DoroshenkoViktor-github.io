{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/ts-project-setup/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"b8c5d0a3-3040-54b0-a781-8e08cdb27dc0","excerpt":"Initializing Project First of all initialize npm project: Then install some , types for , linter and prettier: Now initialize  project: Some of important…","html":"<h2>Initializing Project</h2>\n<p>First of all initialize npm project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y</code></pre></div>\n<p>Then install some <code class=\"language-text\">typescript</code>, types for <code class=\"language-text\">node.js</code>, linter and prettier:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript @types/node</code></pre></div>\n<p>Now initialize <code class=\"language-text\">typescript</code> project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx tsc --init --rootDir src --outDir build --esModuleInterop --resolveJsonModule --lib es6 --module commonjs --allowJs <span class=\"token boolean\">false</span> --noImplicitAny <span class=\"token boolean\">true</span></code></pre></div>\n<p>Some of important <code class=\"language-text\">tsconfig.json</code> options:</p>\n<ul>\n<li><code class=\"language-text\">rootDir</code>: This is where <code class=\"language-text\">typescript</code> looks for source code. We’ve configured it to look in the <code class=\"language-text\">src/</code> folder.</li>\n<li><code class=\"language-text\">outDir</code>: Where TypeScript puts compiled code. In our case it will be placed inside <code class=\"language-text\">build/</code> folder.</li>\n<li><code class=\"language-text\">esModuleInterop</code>: If we’re using <code class=\"language-text\">commonjs</code> as a module system for <code class=\"language-text\">node.js</code>, then we need this to be set to be <code class=\"language-text\">true</code>.</li>\n<li><code class=\"language-text\">resolveJsonModule</code>: If we use <code class=\"language-text\">json</code> in this project, this option allows <code class=\"language-text\">typescript</code> to use it.</li>\n<li><code class=\"language-text\">lib</code>: This option adds ambient types to the project, allowing to rely on features from different <code class=\"language-text\">ecmascript</code> versions, testing libraries or browser <code class=\"language-text\">DOM</code> api.</li>\n<li><code class=\"language-text\">module</code>: <code class=\"language-text\">commonjs</code> is the standard <code class=\"language-text\">node.js</code> module system.</li>\n<li><code class=\"language-text\">allowJs</code>: this option allows you to include <code class=\"language-text\">.js</code> files among <code class=\"language-text\">.ts</code> ones.</li>\n<li><code class=\"language-text\">noImplicitAny</code>: In <code class=\"language-text\">typescript</code> files, don’t allow a type to not specify type. Every type needs to have a specific type or explicitly declare <code class=\"language-text\">any</code> type.</li>\n<li><code class=\"language-text\">sourceMap</code>: Create type maps for better debug experience.</li>\n<li><code class=\"language-text\">strict</code>: Strict mode including strict null checking, strict functional types, check, that <code class=\"language-text\">bind</code>, <code class=\"language-text\">call</code> and <code class=\"language-text\">apply</code> match function’s signature,\ncheck for not initialized constructor properties.</li>\n</ul>\n<p>This should create roughly similar <code class=\"language-text\">tsconfig.json</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2016\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Some Additional <code class=\"language-text\">tsconfig.json</code> Sections</h3>\n<p><strong>Exclude:</strong></p>\n<p><code class=\"language-text\">exclude</code> section defines paths, which will be excluded from the compilation:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// exclude node_modules. excluded by default if no `exclude` section specified</span>\n    <span class=\"token string\">\"path-to-file-or-folder-to-exclude\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"**/*.dev.ts\"</span> <span class=\"token comment\">// exclude all files with specified extension in any folder</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Include:</strong></p>\n<p><code class=\"language-text\">include</code> section works the same as <code class=\"language-text\">exclude</code> but to include specified patterns into compilation.</p>\n<p><strong>Files:</strong></p>\n<p><code class=\"language-text\">files</code> section specifies concrete files to compile.</p>\n<p><strong>AllowJs &#x26;&#x26; CheckJs:</strong></p>\n<p><code class=\"language-text\">allowJs</code> and <code class=\"language-text\">checkJs</code> options enable support for <code class=\"language-text\">js</code> validation inside of <code class=\"language-text\">ts</code> projects.</p>\n<p><strong>Specifying Of Compiled Files Source And Destination:</strong></p>\n<p><code class=\"language-text\">outDir</code> value used to specify the destination folder of compiled <code class=\"language-text\">*.ts</code> files.\n<code class=\"language-text\">rootDir</code> specifies the root of target files to compile. Only files from inside of this root will be compiled.</p>\n<p><strong>Other Options:</strong></p>\n<ul>\n<li><code class=\"language-text\">removeComments</code> - not include comments into compiled <code class=\"language-text\">*.js</code> files.</li>\n<li><code class=\"language-text\">noEmit</code> - compile and check source files, but not create compiled <code class=\"language-text\">*.js</code> files.</li>\n<li><code class=\"language-text\">noEmitOnError</code> - not emit compiled <code class=\"language-text\">js</code> when compilation error occurs.</li>\n</ul>\n<h2>Compilation</h2>\n<p>To compile created project run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx tsc <span class=\"token comment\">#compile project</span>\nnpx tsc -w <span class=\"token comment\">#set compiler to watch mode; (--watch)</span></code></pre></div>\n<p>Running <code class=\"language-text\">*.ts</code> file without compilation to js:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev ts-node nodemon\n\nnpx tsc <span class=\"token operator\">&lt;</span>file-name<span class=\"token operator\">></span>.ts</code></pre></div>\n<p><strong>With monitoring:</strong></p>\n<p>Create <code class=\"language-text\">nodemon.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ext\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".ts,.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ignore\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exec\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node ./src/index.ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And also let’s add run configuration into <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Linting</h2>\n<p>First install <code class=\"language-text\">eslint</code> package and some of it’s supplement packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre></div>\n<p>Create <code class=\"language-text\">.eslintrc</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/eslint-recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To ignore some files or folders like <code class=\"language-text\">node_modules</code> during linting create <a href=\"https://eslint.org/docs/user-guide/configuring/ignoring-code\"><code class=\"language-text\">.eslintignore</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules/\nbuild/\n**/*.js</code></pre></div>\n<p>Add lint script to <code class=\"language-text\">package.json</code> scrypts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><strong>Additional Linting Configuration:</strong></p>\n<p>There are three modes for a rule in <code class=\"language-text\">eslint</code>:</p>\n<ul>\n<li><code class=\"language-text\">off</code> - 0</li>\n<li><code class=\"language-text\">warn</code> - 1</li>\n<li><code class=\"language-text\">error</code> - 2</li>\n</ul>\n<p>There is a documentation on <a href=\"https://eslint.org/docs/rules/\">rules reference</a>.\nFor example to restrict usage of <code class=\"language-text\">console.log</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// this will lead to displaying an error on console.log</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Formatting</h2>\n<p>To format <code class=\"language-text\">typescript</code> code we will use <code class=\"language-text\">prettier</code> library:</p>\n<p>Install it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev prettier</code></pre></div>\n<!-- prettier eslint eslint-config-prettier eslint-plugin-prettier -->\n<p>Then create <code class=\"language-text\">prettier</code> configuration file - <code class=\"language-text\">.prettierrc</code> in the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">semi</code> set to true means that <code class=\"language-text\">prettier</code> will add semicolons when necessary.</li>\n<li><code class=\"language-text\">trailingComma</code> set to none means that <code class=\"language-text\">prettier</code> will remove any trailing commas at the end of objects.</li>\n<li><code class=\"language-text\">singleQuote</code> set to true means that <code class=\"language-text\">prettier</code> will automatically use single quotes instead of double quotes.</li>\n<li><code class=\"language-text\">printWidth</code> set to 80 specifies that the printer will wrap any lines that exceed 80 characters.</li>\n</ul>\n<p>More <code class=\"language-text\">prettier</code> <a href=\"https://prettier.io/docs/en/options.html\">rules</a></p>\n<p>Add formatting command to <code class=\"language-text\">package.json</code> scrypts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --config .prettierrc 'src/**/*.ts' --write\"</span></code></pre></div>\n<p><strong>Conflicts with ESLint:</strong></p>\n<p>There probably will be conflicts between <code class=\"language-text\">prettier</code> formatting and and <code class=\"language-text\">eslint</code>. To make these two love each other install:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-config-prettier eslint-plugin-prettier</code></pre></div>\n<ul>\n<li><code class=\"language-text\">eslint-config-prettier</code>: Turns off all <code class=\"language-text\">eslint</code> rules that have the potential to interfere with <code class=\"language-text\">prettier</code> rules.</li>\n<li><code class=\"language-text\">eslint-plugin-prettier</code>: Turns <code class=\"language-text\">prettier</code> rules into <code class=\"language-text\">eslint</code> rules.</li>\n</ul>\n<p>Lastly, we need to make an adjustment to the <code class=\"language-text\">.eslintrc</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/eslint-recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"prettier\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Testing</h2>\n<p>For tests we will use <code class=\"language-text\">Jest</code> testing framework. To install it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev jest @types/jest ts-jest jest @types/jest ts-jest</code></pre></div>\n<p>And create a configuration file for <code class=\"language-text\">jest</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx ts-jest config:init</code></pre></div>\n<p>Modify content so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  preset<span class=\"token operator\">:</span> <span class=\"token string\">\"ts-jest\"</span><span class=\"token punctuation\">,</span>\n  testEnvironment<span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n  moduleNameMapper<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"@exmpl/(.*)\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;rootDir>/src/$1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testRegex<span class=\"token operator\">:</span> <span class=\"token string\">\"((/__tests__/).*|(\\\\.|/)(test|spec))\\\\.(ts|js)$\"</span><span class=\"token punctuation\">,</span>\n  coverageDirectory<span class=\"token operator\">:</span> <span class=\"token string\">\"coverage\"</span><span class=\"token punctuation\">,</span>\n  collectCoverageFrom<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*.{ts}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!src/**/*.d.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here <code class=\"language-text\">testRegex</code> allows to discover test files.</p>\n<p>Add testing scripts to <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --coverage\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --coverage --watchAll\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>To use test discovery in <code class=\"language-text\">Visual Studio Code</code> <a href=\"https://marketplace.visualstudio.com/items?itemName=kavod-io.vscode-jest-test-adapter\">Jest Test Explorer</a>\nseems quite a good extension.</p>","frontmatter":{"title":"JavaScript/TypeScript Project Setup","date":"March 20, 2022","description":"Setting up basic projects with ESLint, Prettier and Jest"}},"previous":{"fields":{"slug":"/rust/maros/"},"frontmatter":{"title":"Rust - Macros"}},"next":{"fields":{"slug":"/javascript/js-objects/"},"frontmatter":{"title":"JavaScript Object"}}},"pageContext":{"id":"b8c5d0a3-3040-54b0-a781-8e08cdb27dc0","previousPostId":"654ee414-89a5-5451-948d-599d14a7ce5b","nextPostId":"29700fd3-20e5-5ade-8eff-f4d59dca9369"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}