{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/js-objects/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"29700fd3-20e5-5ade-8eff-f4d59dca9369","excerpt":"is a basic structure in . Almost all data structures, except some primitives like\n, , , , ,  and  are inherited from .\nThis also means that these inherited…","html":"<p><code class=\"language-text\">Object</code> is a basic structure in <code class=\"language-text\">js</code>. Almost all data structures, except some primitives like\n<code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">bigint</code>, <code class=\"language-text\">undefined</code>, <code class=\"language-text\">symbol</code> and <code class=\"language-text\">null</code> are inherited from <code class=\"language-text\">object</code>.\nThis also means that these inherited objects also have all properties from <code class=\"language-text\">Object.prototype</code>.</p>\n<p>To remove some keys from <code class=\"language-text\">object</code> there is a special operator <code class=\"language-text\">delete</code> for it.</p>\n<h2>Object Methods</h2>\n<ul>\n<li>\n<p><strong>assign:</strong> allows to copy source object properties into target object. This is something similar\nto spread operator.</p>\n</li>\n<li>\n<p><strong>create:</strong> creates new object using provided object as it’s prototype.</p>\n</li>\n<li>\n<p><strong>entires:</strong> allows to get all provided object’s key/value pairs in from of array</p>\n</li>\n</ul>\n<h2>This</h2>\n<p><code class=\"language-text\">this</code> keyword allows to refer to object properties, related to context of execution.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// key1: value1</span></code></pre></div>\n<p>But it is important to understand that <code class=\"language-text\">this</code> in JavaScript is not always stick to object, where function, calling it is defined,\nbut it depends on context, where this function has been executed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> printValue <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\n<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `key1: undefined`</span></code></pre></div>\n<p>Here <code class=\"language-text\">printValue</code> has been called in the not in context of <code class=\"language-text\">obj</code> where it is defined, but in context of <code class=\"language-text\">window</code> object, which means that here <code class=\"language-text\">this</code> is <code class=\"language-text\">window</code>.</p>\n<p><strong>bind:</strong></p>\n<p>But it is possible to glue a function with it’s context with <code class=\"language-text\">bind</code> method, which accepts as a first parameter object, which will be used as <code class=\"language-text\">this</code> on the next call\nof the function. Rest parameters of <code class=\"language-text\">bind</code> are function parameters. Result of bind is a function, which, when executed in future, will use specified <code class=\"language-text\">this</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> printValue <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\nprintValue <span class=\"token operator\">=</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// key1: value1</span></code></pre></div>\n<p><strong>call:</strong></p>\n<p><code class=\"language-text\">call</code> method has similar signature and purpose as <code class=\"language-text\">bind</code>, the difference, that <code class=\"language-text\">call</code> immediately executes a function on which it has been executed with specified\nobject as <code class=\"language-text\">this</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">func1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisObj<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>apply:</strong></p>\n<p><code class=\"language-text\">apply</code> method also allows to specify <code class=\"language-text\">this</code> and immediately call the function, but has different signature. It allows to pass parameters to executed function as an\narray unlike <code class=\"language-text\">call</code>, which receives parameters as separated arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">func1</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisObj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>This With Different Function Definitions</h3>\n<p>Regular function definition and function declaration takes it’s <code class=\"language-text\">this</code> object from context of execution as described above. But arrow functions, declared with <code class=\"language-text\">() => {}</code>\nsyntax don’t know about <code class=\"language-text\">this</code>. Such a functions will take it from external context. This means, that <code class=\"language-text\">this</code> inside of arrow function will be the object, from nearest\nexternal level, where <code class=\"language-text\">this</code> is defined. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">methodFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1 from methodFunction: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">internalArrowFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1 from internalArrowFunc: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">internalArrowFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">arrowFunc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key1 from arrowFunc: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">methodFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">arrowFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This example will give the result:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">key1 from methodFunction: value1\nkey1 from internalArrowFunc: value1\nkey1 from arrowFunc: undefined</code></pre></div>\n<h2>Iterating Over Object</h2>\n<p>With <code class=\"language-text\">for ... in</code> loop is possible to iterate over all object keys:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token operator\">:</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">,</span>\n  key3<span class=\"token operator\">:</span> <span class=\"token string\">\"value3\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> => </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Plan</h2>\n<ul>\n<li>object destructuring</li>\n<li>spread operator and Object.assign</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">MDN Primitive</a></li>\n</ul>","frontmatter":{"title":"JavaScript Object","date":"March 22, 2022","description":"Working with JS Object"}},"previous":{"fields":{"slug":"/javascript/ts-project-setup/"},"frontmatter":{"title":"JavaScript/TypeScript Project Setup"}},"next":{"fields":{"slug":"/csharp/runnin-asp-project/"},"frontmatter":{"title":"Asp.Net Core Project Configuration"}}},"pageContext":{"id":"29700fd3-20e5-5ade-8eff-f4d59dca9369","previousPostId":"b8c5d0a3-3040-54b0-a781-8e08cdb27dc0","nextPostId":"b629b3a9-b2c8-52fb-b9c4-74060694c99a"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}