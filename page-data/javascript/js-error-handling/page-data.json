{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/js-error-handling/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"e84a3e49-116a-52ab-bb80-ba0ef6dea8a6","excerpt":"Error Object Error Handling Async Error Handling Error Event Custom Errors References When on some part of code execution unexpected situation happens will be…","html":"<ul>\n<li><a href=\"#error-object\">Error Object</a></li>\n<li><a href=\"#error-handling\">Error Handling</a></li>\n<li><a href=\"#async-error-handling\">Async Error Handling</a></li>\n<li><a href=\"#error-event\">Error Event</a></li>\n<li><a href=\"#custom-errors\">Custom Errors</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<p>When on some part of code execution unexpected situation happens will be created and thrown <code class=\"language-text\">Error</code> object. Then going up by call stack <code class=\"language-text\">JavaScript</code> interpreter will check for <code class=\"language-text\">try/catch</code> logic on each next\nlevel until the end of call stack resulting to termination of the program.</p>\n<h2>Error Object</h2>\n<p><code class=\"language-text\">Error</code> is a most basic type of exception object in <code class=\"language-text\">JavaScript</code>. Also this object is often used as a custom error objects prototype.</p>\n<p>Standard forces exception to have at least two fields:</p>\n<ul>\n<li><code class=\"language-text\">name</code> - defined type of error</li>\n<li><code class=\"language-text\">message</code> - human readable description of exception, which should give some error context</li>\n</ul>\n<p>On most modern browsers <code class=\"language-text\">Error</code> object contains <code class=\"language-text\">stack</code> field, which contains information about call stack of execution, which may be useful to get a context of exception.</p>\n<p><strong>Built-in <code class=\"language-text\">JS</code> error types:</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">RangeError</code> - usually thrown, when out of expected input provided. e.g. following code will throw <code class=\"language-text\">RangeError</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span>\npi<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">ReferenceError</code> - is thrown on attempt to access non existing variable</p>\n</li>\n<li>\n<p><code class=\"language-text\">SyntaxError</code> - is thrown, when syntactically invalid provided to the <code class=\"language-text\">JS</code> interpreter</p>\n</li>\n<li>\n<p><code class=\"language-text\">TypeError</code> - thrown, when there is an attempt to use a type in a not appropriate way. e.g. trying to execute non-existing method</p>\n</li>\n<li>\n<p><code class=\"language-text\">URIError</code> - thrown by <code class=\"language-text\">encodeURI</code> or <code class=\"language-text\">decodeURI</code>, when not valid <code class=\"language-text\">url</code> provided</p>\n</li>\n<li>\n<p><code class=\"language-text\">EvalError</code> - thrown by <code class=\"language-text\">eval</code> function</p>\n</li>\n</ul>\n<h2>Error Handling</h2>\n<p>There is a special construct to handle errors in <code class=\"language-text\">JavaScript</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// executing code</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handling possible error</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this will be executed both in success and error cases</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>catch</em> block stops propagation of error further up on the call stack and allows to react to the error happened.</p>\n<p>When there is a need to differentiate reaction on different kinds of errors it is possible to use <code class=\"language-text\">instanceof</code> operator to distinguish error type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handling TypeError</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handling ReferenceError</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handle any other error type, e.g.</span>\n    <span class=\"token keyword\">throw</span> err\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is possible to re-throw caught error any number of times.</p>\n<h2>Async Error Handling</h2>\n<p>When dealing with asynchronous code <code class=\"language-text\">try/catch</code> clause may not catch possible exceptions. This may happen because asynchronous function running outside of call stack, calling it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">throwingAsyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this function throws exception asynchronously</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// exception will not be caught here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If <code class=\"language-text\">throwingAsyncFunc</code> returns <code class=\"language-text\">Promise</code> it is possible to use <code class=\"language-text\">async/await</code> pattern to handle it’s errors with <code class=\"language-text\">try/catch</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">throwingAsyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this function throws exception asynchronously</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// exception will be caught here</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Error Event</h2>\n<p>In <code class=\"language-text\">JavaScript</code> errors are also events. So it is possible to react on this events. For example in browser api it is possible to do with following event listener:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Such error handler will catch unhandled errors from any execution context.\nMoreover, <code class=\"language-text\">addEventListener</code> allows to attach to the <code class=\"language-text\">error</code> event variety of different handlers.\nThis allows to create many centralized handlers for different error types.</p>\n<p>For <code class=\"language-text\">Node.Js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">process<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uncaughtException\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It is also useful to use error events and not directly throw an error when dealing with streams.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">source<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  stream\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// handle arriving piece of data</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// handling end of stream</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// handling possible error during the stream</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Custom Errors</h2>\n<p>If there is a need to catch and re-throw some custom exception up it is a good practice to maintain a context of previous exception:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">.</span>captureStackTrace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> CustomError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrappedError <span class=\"token operator\">=</span> err\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"CustomError\"</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://blog.bitsrc.io/errors-handling-for-vue-class-components-2f152f7c7515\">Better errors handling for ES/Typescript classes</a></li>\n<li><a href=\"https://www.sitepoint.com/proper-error-handling-javascript/\">A Guide to Proper Error Handling in JavaScript</a></li>\n<li><a href=\"https://sematext.com/blog/node-js-error-handling/#toc-types-of-errors-operational-vs-programmer-errors-2\">Node.js Error Handling Made Easy: Best Practices On Just About Everything You Need to Know</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">MDN Error</a></li>\n</ul>","frontmatter":{"title":"JavaScript Error Handling","date":"April 13, 2022","description":"JS error handling best practices"}},"previous":{"fields":{"slug":"/csharp/csharp-testing-with-autofixture/"},"frontmatter":{"title":"AutoFixture In C#"}},"next":{"fields":{"slug":"/javascript/node-js/node-file-system/"},"frontmatter":{"title":"Node.JS File System"}}},"pageContext":{"id":"e84a3e49-116a-52ab-bb80-ba0ef6dea8a6","previousPostId":"225af259-4d21-5a18-83d5-d1b18e0f1cca","nextPostId":"0d4d6676-ff95-532b-b32d-1c9c43bd701a"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}