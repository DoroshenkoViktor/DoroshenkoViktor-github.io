{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/node-js/node-file-system/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"0d4d6676-ff95-532b-b32d-1c9c43bd701a","excerpt":"FS Module Opening Files Creating Files Removing Files Files Metadata Stream API Plan FS Module  is a  module providing access to the file system. Opening Files…","html":"<ul>\n<li><a href=\"#fs-module\">FS Module</a>\n<ul>\n<li><a href=\"#opening-files\">Opening Files</a></li>\n<li><a href=\"#creating-files\">Creating Files</a></li>\n<li><a href=\"#removing-files\">Removing Files</a></li>\n<li><a href=\"#files-metadata\">Files Metadata</a></li>\n</ul>\n</li>\n<li><a href=\"#stream-api\">Stream API</a></li>\n<li><a href=\"#plan\">Plan</a></li>\n</ul>\n<h2>FS Module</h2>\n<p><code class=\"language-text\">fs</code> is a <code class=\"language-text\">node.js</code> module providing access to the file system.</p>\n<h3>Opening Files</h3>\n<p>Function <code class=\"language-text\">open</code> from <code class=\"language-text\">fs</code> allows to open file from file system.</p>\n<p>It has signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token operator\">:</span> PathLike<span class=\"token punctuation\">,</span> \n    flags<span class=\"token operator\">:</span> OpenMode<span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>ErrnoException <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> fd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Flag</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">r</td>\n<td align=\"left\">Open file for read. Throws exception if file doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">r+</td>\n<td align=\"left\">Open file to read and write. Throws exception if file doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">rs+</td>\n<td align=\"left\">Open file in synchronous mode to read and write.</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">Open file for writing. File is created if it doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">wx</td>\n<td align=\"left\">It is same as ‘w’ but fails if path exists.</td>\n</tr>\n<tr>\n<td align=\"left\">w+</td>\n<td align=\"left\">Open file to read and write. File is created if it doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">wx+</td>\n<td align=\"left\">It is same as ‘w+’ but fails if path exists.</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">Open file to append. File is created if it doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">ax</td>\n<td align=\"left\">It is same as ‘a’ but fails if path exists.</td>\n</tr>\n<tr>\n<td align=\"left\">a+</td>\n<td align=\"left\">Open file for reading and appending. File is created if it doesn’t exists.</td>\n</tr>\n<tr>\n<td align=\"left\">ax+</td>\n<td align=\"left\">It is same as ‘a+’ but fails if path exists.</td>\n</tr>\n</tbody>\n</table>\n<p>If file does not exist, it will be created.</p>\n<h3>Creating Files</h3>\n<p>To create new file and write data to it <code class=\"language-text\">fs.write()</code> is used:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">write</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TBuffer <span class=\"token keyword\">extends</span> NodeJS<span class=\"token punctuation\">.</span>ArrayBufferView<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    fd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    buffer<span class=\"token operator\">:</span> TBuffer<span class=\"token punctuation\">,</span>\n    offset<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    position<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>ErrnoException <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> written<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">:</span> TBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">writeContentToFile</span><span class=\"token punctuation\">(</span>\n  path<span class=\"token operator\">:</span> PathLike<span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// open file in write mode</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// write content into opened file</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> numberWritten<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number written: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>numberWritten<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, str: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is a simpler way to write file - <code class=\"language-text\">fs.writeFile()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span> path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> encoding<span class=\"token operator\">:</span> <span class=\"token string\">\"utf-8\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">writeFile</code> has signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>\n    file<span class=\"token operator\">:</span> PathOrFileDescriptor<span class=\"token punctuation\">,</span> \n    data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> NodeJS<span class=\"token punctuation\">.</span>ArrayBufferView<span class=\"token punctuation\">,</span> \n    options<span class=\"token operator\">:</span> WriteFileOptions<span class=\"token punctuation\">,</span> \n    callback<span class=\"token operator\">:</span> NoParamCallback\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To append some data to an existing file or create new if file does not exist there is a method <code class=\"language-text\">fs.appendFile()</code>\nwith following signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>\n  path<span class=\"token operator\">:</span> PathOrFileDescriptor<span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Uint8Array<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> WriteFileOptions<span class=\"token punctuation\">,</span>\n  callback<span class=\"token operator\">:</span> NoParamCallback\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></code></pre></div>\n<p>where <code class=\"language-text\">callback</code> is of signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>ErrnoException <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></code></pre></div>\n<p>In case of any error object <code class=\"language-text\">err</code> of the callback will contain error of type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrnoException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  errno<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  code<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  path<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  syscall<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Removing Files</h3>\n<p>To remove file from file system use <code class=\"language-text\">fs.unlink</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'File deleted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Files Metadata</h3>\n<p>To get file metadata use:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token operator\">:</span> PathLike<span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>ErrnoException <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> stats<span class=\"token operator\">:</span> Stats<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Stats</code> object contains:</p>\n<ul>\n<li><code class=\"language-text\">isFile(): boolean</code></li>\n<li><code class=\"language-text\">isDirectory(): boolean</code></li>\n<li><code class=\"language-text\">isBlockDevice(): boolean</code></li>\n<li><code class=\"language-text\">isCharacterDevice(): boolean</code></li>\n<li><code class=\"language-text\">isSymbolicLink(): boolean</code></li>\n<li><code class=\"language-text\">isFIFO(): boolean</code></li>\n<li><code class=\"language-text\">isSocket(): boolean</code></li>\n</ul>\n<p>To rename files there is a <code class=\"language-text\">fs.rename()</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>existingFilePath<span class=\"token punctuation\">,</span> newFileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'File Renamed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Stream API</h2>\n<p>Stream is a way to transfer data continuously. It is especially useful with large data, which could not be\nloaded into RAM otherwise.</p>\n<p><code class=\"language-text\">node:fs</code> module contains functions to operate streams over files.</p>\n<p>To create read stream:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createReadStream</code> has signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token operator\">:</span> PathLike<span class=\"token punctuation\">,</span> \n    options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> BufferEncoding <span class=\"token operator\">|</span> ReadStreamOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadStream<span class=\"token punctuation\">;</span></code></pre></div>\n<p>To read data from create stream there is a <code class=\"language-text\">data</code> event, which should be listened:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To create write file stream there is a <code class=\"language-text\">fs.createWriteStream()</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    encoding<span class=\"token operator\">:</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example will write 100 lines with increasing numbers into file with path equal to <code class=\"language-text\">path</code> variable value.</p>\n<p>Streams can be piped with other streams. For example we can create stream over http to download data\nand pipe it to file stream to immediately write this data to file. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">axios<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Readable<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> responseType<span class=\"token operator\">:</span> <span class=\"token string\">\"stream\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fileWriteStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./local-file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fileWriteStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Plan</h2>\n<ul>\n<li><code class=\"language-text\">path</code></li>\n<li><code class=\"language-text\">process.cwd()</code></li>\n</ul>","frontmatter":{"title":"Node.JS File System","date":"April 24, 2022","description":"Working with file system in Node.JS"}},"previous":{"fields":{"slug":"/javascript/js-error-handling/"},"frontmatter":{"title":"JavaScript Error Handling"}},"next":{"fields":{"slug":"/javascript/node-js/node-http/"},"frontmatter":{"title":"Node.Js Http"}}},"pageContext":{"id":"0d4d6676-ff95-532b-b32d-1c9c43bd701a","previousPostId":"e84a3e49-116a-52ab-bb80-ba0ef6dea8a6","nextPostId":"e574cf03-0fb1-50d4-8531-4ad79338bb7b"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}