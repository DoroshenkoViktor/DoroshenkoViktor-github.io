{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/rust/documenting/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"a03f1a39-1cc3-580e-adea-21aef924b71a","excerpt":"Rust has a feature of documentation comments. These comments may be implemented with \ndirective immediately before piece of documented code. Such comments mayâ€¦","html":"<p>Rust has a feature of documentation comments. These comments may be implemented with <code class=\"language-text\">///</code>\ndirective immediately before piece of documented code. Such comments may be compiled to html docs.\nIt is possible to use <code class=\"language-text\">markdown</code> markup inside of documentation comments in Rust.</p>\n<p>To generate actual documentation use <code class=\"language-text\">cargo doc</code>. It compiles documentation and puts it to the\n<code class=\"language-text\">./target/doc</code> directory inside of the project.</p>\n<p><code class=\"language-text\">cargo doc --open</code> command not only compiles documentation, but also opens it in the browser.</p>\n<p><code class=\"language-text\">//!</code> declaration used to create documentation for comments. Usually it used for documenting\ncrates or modules.</p>\n<h2>Doc Comments Structure</h2>\n<p>Example of doc comment:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Prints given value</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// # Examples</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// ```</span>\n<span class=\"token comment\">/// let val = \"value to print\";</span>\n<span class=\"token comment\">/// let answer = my_crate::print_value(val);</span>\n<span class=\"token comment\">/// ```</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">print_value</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{val}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Sections:</strong></p>\n<ul>\n<li><code class=\"language-text\">Examples</code> - list some possible examples, displaying how to use this function.\nExample code is being run during test. It allows to ensure that doc examples are up to date\nwith the code it describes;</li>\n<li><code class=\"language-text\">Panics</code> - list of cases, when this function may panic;</li>\n<li><code class=\"language-text\">Errors</code> - list of possible errors;</li>\n<li><code class=\"language-text\">Safety</code> - If the function is unsafe to call, there should be a section explaining why\nthe function is unsafe and covering the invariants that the function expects callers to uphold.</li>\n</ul>","frontmatter":{"title":"Rust - Creating Documentation","date":"March 02, 2022","description":"Rust ways to create documented code"}},"previous":{"fields":{"slug":"/rust/smart-pointers/"},"frontmatter":{"title":"Rust Smart Pointers"}},"next":{"fields":{"slug":"/rust/rust-oop/"},"frontmatter":{"title":"Rust - OOP Features"}}},"pageContext":{"id":"a03f1a39-1cc3-580e-adea-21aef924b71a","previousPostId":"c751c5f1-01aa-5148-a02b-b6ee6906e5c5","nextPostId":"f4566446-f889-540f-8129-5608924c4479"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}