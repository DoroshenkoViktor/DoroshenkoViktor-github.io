{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/rust/functions/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"1184b19b-5203-5820-b48c-0d89fa0a45e5","excerpt":"Delegating Functions With Function Pointers Function pointers allow to pass regular function into other functions as a parameters.\nThe  type is called a…","html":"<h2>Delegating Functions With Function Pointers</h2>\n<p>Function pointers allow to pass regular function into other functions as a parameters.\nThe <code class=\"language-text\">fn</code> type is called a function pointer.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">do_twice</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">do_twice</span><span class=\"token punctuation\">(</span>add_one<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The answer is: {}\"</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Unlike closures, <code class=\"language-text\">fn</code> is a type rather than a trait, so we specify <code class=\"language-text\">fn</code> as the parameter type\ndirectly rather than declaring a generic type parameter with one of the <code class=\"language-text\">Fn</code> traits as a trait bound.</p>\n<p>Function pointers implement all three of the closure traits <code class=\"language-text\">Fn</code>, <code class=\"language-text\">FnMut</code>, and <code class=\"language-text\">FnOnce</code>, so you\ncan always pass a function pointer as an argument for a function that expects a closure. It’s\nbest to write functions using a generic type and one of the closure traits so your functions can\naccept either functions or closures.</p>\n<h2>Closures</h2>\n<p>To return closure from a function it must be wrappet into some smart pointer, because it does not\nclear in the compile time, how much space a closure will take.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returns_closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Rust - Functions","date":"March 15, 2022","description":"Working with functions in Rust"}},"previous":{"fields":{"slug":"/utilites/git/"},"frontmatter":{"title":"Git Cheatsheet"}},"next":{"fields":{"slug":"/rust/maros/"},"frontmatter":{"title":"Rust - Macros"}}},"pageContext":{"id":"1184b19b-5203-5820-b48c-0d89fa0a45e5","previousPostId":"39d1d02c-0636-550c-8b78-744f8a693a9c","nextPostId":"654ee414-89a5-5451-948d-599d14a7ce5b"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}