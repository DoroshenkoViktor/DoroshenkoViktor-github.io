{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/rust/serialization/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"d1cb30ab-da0a-5c6d-bc5d-09d70fa00ada","excerpt":"Attributes Container Attributes These are  attributes placed on top of target struct.  - this attribute allows to specify format of  keys.\nPossible s are…","html":"<h2>Attributes</h2>\n<h2>Container Attributes</h2>\n<p>These are <code class=\"language-text\">serde</code> attributes placed on top of target struct.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">#[serde(rename_all = \"&lt;value>\")]</code> - this attribute allows to specify format of <code class=\"language-text\">json</code> keys.\nPossible <code class=\"language-text\">&lt;value></code>s are:</p>\n<ul>\n<li><code class=\"language-text\">lowercase</code></li>\n<li><code class=\"language-text\">UPPERCASE</code></li>\n<li><code class=\"language-text\">PascalCase</code></li>\n<li><code class=\"language-text\">camelCase</code></li>\n<li><code class=\"language-text\">snake_case</code></li>\n<li><code class=\"language-text\">SCREAMING_SNAKE_CASE</code></li>\n<li><code class=\"language-text\">kebab-case</code></li>\n<li><code class=\"language-text\">SCREAMING-KEBAB-CASE</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">  <span class=\"token comment\">//{</span>\n  <span class=\"token comment\">//    \\\"someKey1\\\": \\\"v1\\\",</span>\n  <span class=\"token comment\">//    \\\"someKey2\\\": 8</span>\n  <span class=\"token comment\">//}</span>\n\n  <span class=\"token attribute attr-name\">#[derive(Deserialize, Serialize, Debug)]</span>\n  <span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">T</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">pub</span> some_key_1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">pub</span> some_key_2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2>Field Attributes</h2>\n<p>These are attributes, placed on fields of <code class=\"language-text\">structs</code> or <code class=\"language-text\">enum</code> variants:</p>\n<ul>\n<li>\n<p><strong>rename:</strong> - allows to rename some field on serialization/deserialization and separately\nfor each of them:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">  <span class=\"token attribute attr-name\">#[derive(Deserialize, Serialize, Debug)]</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">T</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token attribute attr-name\">#[serde(rename(serialize = <span class=\"token string\">\"SERIALIZE_KEY\"</span>, deserialize = <span class=\"token string\">\"other_KEY\"</span>))]</span>\n      <span class=\"token keyword\">pub</span> some_key_1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n      <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"key2\"</span>)]</span>\n      <span class=\"token keyword\">pub</span> some_key_2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{\n      \\\"other_KEY\\\": \\\"v1\\\",\n      \\\"key2\\\": 8\n  }\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> t<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>json<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> serialized <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serialized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>serialized<span class=\"token punctuation\">)</span></code></pre></div>\n<p>where <code class=\"language-text\">serialized</code> will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"SERIALIZE_KEY\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>alias:</strong> - specifies possible alias for property name, but it leaves possibility to\nserialize/deserialize also with native Rust’s struct field name.</p>\n</li>\n<li>\n<p><strong>skip:</strong> - don’t serialize/deserialize specified field. It has also more narrow <code class=\"language-text\">skip_serializing</code>\nand <code class=\"language-text\">skip_deserializing</code>.</p>\n</li>\n</ul>","frontmatter":{"title":"Rust Serialization/Deserialization","date":"March 03, 2022","description":"Serialization and deserialization with Serde library"}},"previous":{"fields":{"slug":"/rust/cargo/"},"frontmatter":{"title":"Rust Package Management"}},"next":{"fields":{"slug":"/rust/concurrency/"},"frontmatter":{"title":"Rust Concurrency"}}},"pageContext":{"id":"d1cb30ab-da0a-5c6d-bc5d-09d70fa00ada","previousPostId":"ca8558da-d20c-5ab6-8047-7f6d2778a999","nextPostId":"7d5f8131-07f5-5e0c-84e8-06ffde07a45a"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}