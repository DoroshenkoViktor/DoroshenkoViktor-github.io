{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/rust/concurrency/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"7d5f8131-07f5-5e0c-84e8-06ffde07a45a","excerpt":"Modern operating systems manage programms execution with .  - is a basic unit of work to be implemented in a operatin system. The OS takes a program as a set of…","html":"<p>Modern operating systems manage programms execution with <code class=\"language-text\">processes</code>.</p>\n<p><code class=\"language-text\">Process</code> - is a basic unit of work to be implemented in a operatin system.</p>\n<p>The OS takes a program as a set of instructions and run all it’s instructions in context of some\nprocess. Each process has it’s own <code class=\"language-text\">stack</code> and <code class=\"language-text\">heap</code>.</p>\n<p>Within one <code class=\"language-text\">process</code> program can run multiple threads.</p>\n<p><code class=\"language-text\">Thread</code> - is a smallest sequence of instructions, that can be managed independently by OS scheduler.</p>\n<p>Multiple thread of one process share this process’s heap.</p>\n<p>Multithreaded execution may have several problems:</p>\n<ul>\n<li><code class=\"language-text\">Race conditions</code>, where threads are accessing data or resources in an inconsistent order</li>\n<li><code class=\"language-text\">Deadlocks</code>, where two threads are waiting for each other to finish using a resource the other\nthread has, preventing both threads from continuing</li>\n<li>Bugs that happen only in certain situations and are hard to reproduce and fix reliably</li>\n</ul>\n<p>Usually OS gives an public interface to create new threads. Usin it called <code class=\"language-text\">1:1</code> - one program\nthread for one OS thread. Some languages have their own implementation of threads, where it is not\nnecessary one to one relationship between language and OS threads amount. Such threads called\n<code class=\"language-text\">grean threads</code>. It is <code class=\"language-text\">M:N</code> model, where <code class=\"language-text\">M</code> is amount of green threads and <code class=\"language-text\">N</code> is an amount of\nOS threads.</p>\n<p>Rust standard library provides only <code class=\"language-text\">1:1</code> model in order to have smaller runtime.</p>\n<h2>Creating Threads</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi number {} from the spawned thread!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi number {} from the main thread!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>all started threads will be eventually stopped or when they will execute all their instructions or when main thread will be stopped</em></p>\n<p>To ensure all threads finished correctly, use <code class=\"language-text\">join</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi number {} from the spawned thread!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi number {} from the main thread!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Calling <code class=\"language-text\">handle.join()</code> blocks main thread’s execution until this <code class=\"language-text\">handle</code> thread will be finished.</p>\n<h3>Outer Context</h3>\n<p>Rust can not infer, how long thread will live, so following will not work:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's a vector: {:?}\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// oh no!</span>\n\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This can be solved my moving ownership to the thread context with <code class=\"language-text\">move</code> closure:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's a vector: {:?}\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But in this case after thread has started, we don’t have access to <code class=\"language-text\">v</code> vector, because it has\nalready been moved.</p>\n<h2>Synchronization</h2>\n<h3>Message Passing</h3>\n<p><code class=\"language-text\">Message passing</code> - threads or actors communicate by sending each other messages containing data.\nAs an implementation of this concept Rust uses <code class=\"language-text\">channels</code>.</p>\n<p>Channel consists of two parts:</p>\n<ul>\n<li><code class=\"language-text\">transmitter</code> - is an upstream where source data is sent.</li>\n<li><code class=\"language-text\">receiver</code> - is a target location of data.</li>\n</ul>\n<p>Channel is closing when closing either <code class=\"language-text\">transmitter</code> or <code class=\"language-text\">receiver</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tx<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> received <span class=\"token operator\">=</span> rx<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got: {}\"</span><span class=\"token punctuation\">,</span> received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">mpsc</code> stands for multiple producer, single consumer. Channel can have multiple sending ends that\nproduce values but only one receiving end that consumes those values. The <code class=\"language-text\">mpsc::channel</code> function\nreturns a tuple, the first element of which is the sending end and the second element is the\nreceiving end. The abbreviations <code class=\"language-text\">tx</code> and <code class=\"language-text\">rx</code> are traditionally used in many fields for\ntransmitter and receiver respectively, so we name our variables as such to indicate each end.</p>\n<p>We move transmitter to the new thread and send a value into it from this thread. The spawned thread\nneeds to own the transmitting end of the channel to be able to send messages through the channel.\nThe send method returns a <code class=\"language-text\">Result&lt;T, E></code> type, so if the receiving end has already been dropped\nand there’s nowhere to send a value, the send operation will return an error.</p>\n<p>Then we are able to receive sent value in the main thread with receiver instance.</p>\n<p>Send moves ownership of sent variables so it is not possible to use them after that in this thread.</p>\n<p><code class=\"language-text\">recv</code>, short for receive, which will block the main thread’s execution and wait until a value is\nsent down the channel. Once a value is sent, recv will return it in a <code class=\"language-text\">Result&lt;T, E></code>. When the\nsending end of the channel closes, recv will return an error to signal that no more values will be\ncoming.</p>\n<p>The <code class=\"language-text\">try_recv</code> method doesn’t block, but will instead return a <code class=\"language-text\">Result&lt;T, E></code> immediately: an <code class=\"language-text\">Ok</code>\nvalue holding a message if one is available and an <code class=\"language-text\">Err</code> value if there aren’t any messages this\ntime. Using <code class=\"language-text\">try_recv</code> is useful if this thread has other work to do while waiting for messages:\nwe could write a loop that calls <code class=\"language-text\">try_recv</code> every so often, handles a message if one is available,\nand otherwise does other work for a little while until checking again.</p>\n<h3>Multiple Producers</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> tx1 <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> vals <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals <span class=\"token punctuation\">{</span>\n            tx1<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> vals <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"more\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals <span class=\"token punctuation\">{</span>\n            tx<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> received <span class=\"token keyword\">in</span> rx <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got: {}\"</span><span class=\"token punctuation\">,</span> received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Mutexes</h2>\n<p><code class=\"language-text\">Mutex</code> is an abbreviation for mutual exclusion, as in, a mutex allows only one thread to access\nsome data at any given time. To access the data in a mutex, a thread must first signal that it\nwants access by asking to acquire the mutex’s lock. The lock is a data structure that is part of\nthe mutex that keeps track of who currently has exclusive access to the data. Therefore, the mutex\nis described as guarding the data it holds via the locking system.</p>\n<p>There are two basic steps to use <code class=\"language-text\">mutex</code>:</p>\n<ol>\n<li>Engage lock with mutex before accessing actual data</li>\n<li>Release lock from mutex to allow other threads to use it</li>\n</ol>\n<p><strong>Mutex<T></strong> - is a smart pointer allowing to access inner data concurrently. To use inner value\nwe have to call <code class=\"language-text\">lock</code> method on it. It will block the thread and return a <code class=\"language-text\">LockResult</code>. If the\nvalue is locked by another thread it will wait for release. If another thread, which locked\nresource before current <code class=\"language-text\">lock</code> call paniced, <code class=\"language-text\">LockResult</code> will return error. Success case is\n<code class=\"language-text\">MutexGuard</code>, which points to actual data. It implements <code class=\"language-text\">Deref</code> and <code class=\"language-text\">Drop</code> traits, so it will\nautomatically release the locked value after <code class=\"language-text\">MutexGuard</code> will go out of scope.</p>\n<p>Let’s see, how to use mutex in Rust on example:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m = {:?}\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Sharing mutexes between threads:</strong></p>\n<p><code class=\"language-text\">Mutex&lt;T></code> can not be easily shared between threads because of ownership rules ensuring, that\nthere is only a single owner of the variable may exist at one moment of time. So we have to use\nwrapping to another smart pointer. We may try to use <code class=\"language-text\">Rc&lt;T></code> smart pointer, but although it\ncan solve the problem partially, it is not intended to use in multithreaded context. But there is\na similar concpet - <code class=\"language-text\">std::sync::atomic::Arc&lt;T></code>, which does the same, <code class=\"language-text\">Rc&lt;T></code> can, but with\nguarantees for thread safety.</p>\n<p>The reason, why functionality of <code class=\"language-text\">Arc&lt;T></code> does not embedded into regular <code class=\"language-text\">Rc&lt;T></code> is little\nperformance downgrade as a price for thread safety. So if we don’t require synchronization,\nwe normally don’t need this guarantees.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Arc</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handles <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token operator\">*</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> handles <span class=\"token punctuation\">{</span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Send</h2>\n<p>To be able to send objects and their ownership between threads, these objects have to implement\n<code class=\"language-text\">Sync</code> trait. By default almost all Rust objects implements it. But there are some exceptions, like\n<code class=\"language-text\">Rc&lt;T></code>, which is not thread safe.</p>\n<h2>Sync</h2>\n<p><code class=\"language-text\">Sync</code> is a trait, which shows that type, implementing <code class=\"language-text\">Send</code> may be safely referenced by many threads.</p>\n<p>Complex types, which consist of other <code class=\"language-text\">Send</code> + <code class=\"language-text\">Sync</code> compatible objects are automatically also\nimplement <code class=\"language-text\">Send+Sync</code>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch16-01-threads.html\">Using Threads to Run Code Simultaneously</a></li>\n<li><a href=\"https://www.tutorialspoint.com/operating_system/os_processes.html\">Operating System - Processes</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch16-02-message-passing.html\">Using Message Passing to Transfer Data Between Threads</a></li>\n</ul>","frontmatter":{"title":"Rust Concurrency","date":"March 05, 2022","description":"Rust concurrency model and message passing"}},"previous":{"fields":{"slug":"/rust/serialization/"},"frontmatter":{"title":"Rust Serialization/Deserialization"}},"next":{"fields":{"slug":"/rust/pattern-matching/"},"frontmatter":{"title":"Rust - Pattern Matching"}}},"pageContext":{"id":"7d5f8131-07f5-5e0c-84e8-06ffde07a45a","previousPostId":"d1cb30ab-da0a-5c6d-bc5d-09d70fa00ada","nextPostId":"3850f584-86a4-5621-96e1-512b2a7295ea"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}