{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/csharp/runnin-asp-project/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"b629b3a9-b2c8-52fb-b9c4-74060694c99a","excerpt":"There are basically several ways to configure runtime of  application: command line arguments environment variables configuration inside of code Runtime Commandâ€¦","html":"<p>There are basically several ways to configure runtime of <code class=\"language-text\">Asp.Net Core</code> application:</p>\n<ul>\n<li>command line arguments</li>\n<li>environment variables</li>\n<li>configuration inside of code</li>\n</ul>\n<h2>Runtime Command Line Arguments</h2>\n<p>Configuring ports, which will be listened on runtime of the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet run --urls <span class=\"token string\">\"http://localhost:5000;https://localhost:5001\"</span></code></pre></div>\n<p>Listening urls have to be in specific format for IPv4 - <code class=\"language-text\">{scheme}://{loopbackAddress}:{port}</code> or <code class=\"language-text\">{scheme}://{IPAddress}:{port}</code>.\nTo listen for any port on available address - <code class=\"language-text\">{scheme}://*:{port}</code>.\nIf port is omitted, it will fallback to default <code class=\"language-text\">80</code> for <code class=\"language-text\">http</code> and <code class=\"language-text\">443</code> for <code class=\"language-text\">https</code>.</p>\n<h2>Configuration Environment Variables</h2>\n<p>We can configure runtime of such things, like server configuration and</p>\n<h2>Configuration With Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Host<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefaultBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureWebHostDefaults</span><span class=\"token punctuation\">(</span>webBuilder <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    webBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// here we can configure listening ports</span>\n    webBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseUrls</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:5003\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://localhost:5004\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://andrewlock.net/5-ways-to-set-the-urls-for-an-aspnetcore-app/\">5 ways to set the URLs for an ASP.NET Core app</a></li>\n</ul>","frontmatter":{"title":"Asp.Net Core Project Configuration","date":"March 24, 2022","description":"Configuration of Asp.Net Core project runtime"}},"previous":{"fields":{"slug":"/javascript/js-objects/"},"frontmatter":{"title":"JavaScript Object"}},"next":{"fields":{"slug":"/javascript/js-dom/"},"frontmatter":{"title":"JS - DOM"}}},"pageContext":{"id":"b629b3a9-b2c8-52fb-b9c4-74060694c99a","previousPostId":"29700fd3-20e5-5ade-8eff-f4d59dca9369","nextPostId":"d6369b77-666f-5b05-9dc0-83895c94c26b"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}