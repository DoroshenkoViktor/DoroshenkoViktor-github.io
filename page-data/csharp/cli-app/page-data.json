{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/csharp/cli-app/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tech Notes"}},"markdownRemark":{"id":"a5786029-4d28-5cff-8670-701e9decec0f","excerpt":"Initial Setup We will create a simple  application which will be able to run conventional  interface with mandatory arguments and optional parameters. Our appâ€¦","html":"<h2>Initial Setup</h2>\n<p>We will create a simple <code class=\"language-text\">c#</code> application which will be able to run conventional <code class=\"language-text\">CLI</code> interface with mandatory arguments and optional parameters. Our app will have simple logging, provided by <code class=\"language-text\">Serilog</code>\nand <code class=\"language-text\">CQRS</code> pattern with <code class=\"language-text\">MediatR</code>.</p>\n<p>At the beginning we need to create a new solution, <code class=\"language-text\">CLI</code> and <code class=\"language-text\">Business</code> projects:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new sln -o charp-cli-app\n<span class=\"token builtin class-name\">cd</span> charp-cli-app\ndotnet new console -o CLI\ndotnet new console -o Business\ndotnet sln <span class=\"token function\">add</span> CLI Business</code></pre></div>\n<p>Our project will have simple business and presentation layering, where <code class=\"language-text\">Business</code> is a stable component\nand presentational <code class=\"language-text\">CLI</code> project will depend on it. This means, we need to create references between projects:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> ./CLI reference Business</code></pre></div>\n<p>This will create a reference inside <code class=\"language-text\">CLI/CLI.csproj</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Business\\Business.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We created solution and two empty projects with proper references. Now we need to add external dependencies for our project.</p>\n<p>In <code class=\"language-text\">CLI</code> project add:</p>\n<ul>\n<li><code class=\"language-text\">Serilog</code> library for logging</li>\n<li><code class=\"language-text\">Serilog.Sinks.Console</code> allows to configure logging into terminal</li>\n<li><code class=\"language-text\">Serilog.Extensions.Logging</code> - it allows to use Serilog with standard <code class=\"language-text\">ILogger&lt;T></code> interface</li>\n<li><code class=\"language-text\">Microsoft.Extensions.CommandLineUtils</code> NuGet to easily parse arguments and create commands</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> ./CLI package Serilog -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span>\ndotnet <span class=\"token function\">add</span> ./CLI package Serilog.Sinks.Console -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span>\ndotnet <span class=\"token function\">add</span> ./CLI package Serilog.Extensions.Logging -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span>\ndotnet <span class=\"token function\">add</span> ./CLI package Microsoft.Extensions.CommandLineUtils -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre></div>\n<p>This will create in <code class=\"language-text\">CLI/CLI.csproj</code> file following lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.CommandLineUtils<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Serilog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Serilog.Extensions.Logging<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Serilog.Sinks.Console<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then add to <code class=\"language-text\">Business</code>:</p>\n<ul>\n<li><code class=\"language-text\">MediatR</code> - simple request/response library</li>\n<li><code class=\"language-text\">Microsoft.Extensions.Logging</code> - contains standard logging functionality, which we will use for <code class=\"language-text\">DI</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> ./Business package MediatR -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span>\ndotnet <span class=\"token function\">add</span> ./Business Microsoft.Extensions.Logging -v <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MediatR<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.Logging<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;version><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><em>Need to specify particular version of packages instead of <version>, because it is always a subject to change</em></p>\n<h2>Implementing Business</h2>\n<p>Unlike real life in our study cli app business does not have a big value. To imitate it we simply will\nuse basic mathematical operations.</p>\n<p>To be more conventional and a little bit follow TDD, create new test project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new xunit -o Tests\ndotnet <span class=\"token function\">add</span> ./Tests reference ./Business\ndotnet sln <span class=\"token function\">add</span> Tests</code></pre></div>\n<p>And create new class <code class=\"language-text\">CalculatorTests</code> in tests project and create simple tests for our business:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Tests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShouldAddTwoValues__WhenNoOverflow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> expectedResult<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// arrange</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// act</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// assert</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span>expectedResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In business project create two interfaces. First <code class=\"language-text\">ICalculator</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Business</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICalculator</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And second <code class=\"language-text\">IFileService</code> - it will be used if optional parameter to save result into file will be\npassed:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Business<span class=\"token punctuation\">.</span>Interfaces</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFileService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">SaveToFileAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then create implementation in <code class=\"language-text\">Business</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Business</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICalculator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a quite naive implementation, but itâ€™s enough for our purpose of building CLI application ðŸ˜œ</p>\n<p>Implementation of <code class=\"language-text\">IFileService</code> weâ€™ll create in <code class=\"language-text\">CLI/Services</code> because it is not strictly related to\nour business, but to infrastructure:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CLI<span class=\"token punctuation\">.</span>Services</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileService</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFileService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">SaveToFileAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllTextAsync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllTextAsync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now as our tests pass, we can move to implementation of our <code class=\"language-text\">CLI</code>.</p>\n<h2>CLI Project Configuration</h2>\n<p>At the beginning we have to create <code class=\"language-text\">DI</code> container and register our dependencies.\nTo do it, write following in <code class=\"language-text\">CLI/Program.cs</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICalculator<span class=\"token punctuation\">,</span> Calculator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IFileService<span class=\"token punctuation\">,</span> FileService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuring Logging:</strong></p>\n<p>Create file <code class=\"language-text\">ConfigurationExtensions.cs</code> file in <code class=\"language-text\">CLI</code> project with content:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CLI</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurationExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IServiceCollection</span> <span class=\"token function\">AddSerilogLogging</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CreateLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddLogging</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetMinimumLevel</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Trace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">dispose</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> services<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will setup logging with <code class=\"language-text\">Serilog</code> to console and allows to use loggers with dependency injection.\nNow we can use this extension on our <code class=\"language-text\">DI</code> container in <code class=\"language-text\">Program.cs</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilogLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICalculator<span class=\"token punctuation\">,</span> Calculator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IFileService<span class=\"token punctuation\">,</span> FileService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>MediatR:</strong></p>\n<p>Now creating <code class=\"language-text\">MediatR</code> command for adding numbers in <code class=\"language-text\">Business/Requests</code> folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Business<span class=\"token punctuation\">.</span>Requests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">AddNumbersCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> X<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Y<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> ResultPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRequest<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Command contains <code class=\"language-text\">nullable</code> ResultPath. If it exists we will save result to file by this provided path.</p>\n<p>And handler for it in <code class=\"language-text\">Business/Handlers</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Business<span class=\"token punctuation\">.</span>Handlers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddNumbersHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRequestHandler<span class=\"token punctuation\">&lt;</span>AddNumbersCommand<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>AddNumbersHandler<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICalculator</span> _calculator<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IFileService</span> _fileService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AddNumbersHandler</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>AddNumbersHandler<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">ICalculator</span> calculator<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IFileService</span> fileService\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n        _calculator <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">;</span>\n        _fileService <span class=\"token operator\">=</span> fileService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AddNumbersCommand</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> resultPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adding values {X} and {Y}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> _calculator<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Calculated result: {Result}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultPath <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saving result to file {Path}\"</span><span class=\"token punctuation\">,</span> resultPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> content <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Adding </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">x</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">y</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\n\"</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">await</span> _fileService<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToFileAsync</span><span class=\"token punctuation\">(</span>resultPath<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result saved\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> Unit<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error happened during handling addition of values {X} and {Y}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To register <code class=\"language-text\">MediatR</code> with <code class=\"language-text\">DI</code> container add it to <code class=\"language-text\">ServiceProvider</code> configuration in <code class=\"language-text\">Program.cs</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilogLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddMediatR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">AddNumbersHandler</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICalculator<span class=\"token punctuation\">,</span> Calculator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IFileService<span class=\"token punctuation\">,</span> FileService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>CLI</h2>\n<p>Now we can start to create a main part of this guide - CLI parameters parsing and routing them to\nproper command handler.</p>\n<p>In <code class=\"language-text\">Program.cs</code> file add following code, which creates <code class=\"language-text\">Microsoft.Extensions.CommandLineUtils</code> app:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandLineApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"CSharp CLI Application\"</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">=</span> <span class=\"token string\">\"Simple C# console application\"</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">HelpOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-h|--help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we create command line app object, where define itâ€™s name, description and define command to get help.</p>\n<p>Next we will configure <code class=\"language-text\">add numbers</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mediator <span class=\"token operator\">=</span> serviceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IMediator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> logger <span class=\"token operator\">=</span> serviceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ILogger<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> x <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span><span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;x>\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"first number\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> y <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span><span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;y>\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"second number\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> resultPath <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span><span class=\"token function\">Option</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-rp|--result-path\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"file path to save result\"</span><span class=\"token punctuation\">,</span>\n        CommandOptionType<span class=\"token punctuation\">.</span>SingleValue\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    opt<span class=\"token punctuation\">.</span><span class=\"token function\">HelpOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-h|--help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    opt<span class=\"token punctuation\">.</span><span class=\"token function\">OnExecute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"first argument </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">x<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is not a number\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> yInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"first argument </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">y<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is not a number\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AddNumbersCommand</span>\n            <span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">X</span><span class=\"token punctuation\">:</span> xInt<span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">Y</span><span class=\"token punctuation\">:</span> yInt<span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">ResultPath</span><span class=\"token punctuation\">:</span> resultPath<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> resultPath<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> mediator<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArgumentException</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error happened: {Message}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here with <code class=\"language-text\">app.Command()</code> we create command handler with name <code class=\"language-text\">add</code>. If we run <code class=\"language-text\">--help</code> command of our app(inside of <code class=\"language-text\">./CLI</code> project) we will see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>help\n\n\n<span class=\"token property\">Usage:</span> CSharp CLI Application <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span>\n\n<span class=\"token property\">Options:</span>\n  <span class=\"token operator\">-</span>h<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>help  Show help information\n\n<span class=\"token property\">Commands:</span>\n  add\n\nUse <span class=\"token string\">\"CSharp CLI Application [command] --help\"</span> for more information about a command<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Then inside of command handler delegate we define arguments - first and second numbers to add and optional parameters - file path to save result and define help option for <code class=\"language-text\">add</code> command.</p>\n<p>And finally with <code class=\"language-text\">opt.OnExecute</code> we define handler function, which will be executed to handle <code class=\"language-text\">add</code> command.\nInside of this handler we specify logic to parse arguments to their target types and handling of\npossible parsing errors. When we have parsed parameters, using <code class=\"language-text\">mediator</code> we route our data to\nproper <code class=\"language-text\">add numbers</code> handler.</p>\n<p>Running help for <code class=\"language-text\">add</code> command in our <code class=\"language-text\">CLI</code> project we will get following result:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> add <span class=\"token operator\">-</span><span class=\"token operator\">-</span>help\n\n\n<span class=\"token property\">Usage:</span> CSharp CLI Application add <span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span>\n\n<span class=\"token property\">Arguments:</span>\n  <span class=\"token operator\">&lt;</span>x<span class=\"token operator\">></span>  first number\n  <span class=\"token operator\">&lt;</span>y<span class=\"token operator\">></span>  second number\n\n<span class=\"token property\">Options:</span>\n  <span class=\"token operator\">-</span>rp<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>path  file path to save result\n  <span class=\"token operator\">-</span>h<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>help          Show help information</code></pre></div>\n<p>Now we can test our app. Running it with valid data gives following:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> add <span class=\"token number\">2</span> <span class=\"token number\">2</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:10:46</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> Adding values <span class=\"token number\">2</span> and <span class=\"token number\">2</span>\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:10:46</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> <span class=\"token property\">Calculated result:</span> <span class=\"token number\">4</span></code></pre></div>\n<p>Running with optional file path for saving result:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> add <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>path <span class=\"token domain constant\">results.txt</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:11:59</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> Adding values <span class=\"token number\">2</span> and <span class=\"token number\">2</span>\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:11:59</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> <span class=\"token property\">Calculated result:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:11:59</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> Saving result to file <span class=\"token domain constant\">results.txt</span>\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:11:59</span> <span class=\"token level info keyword\">INF</span><span class=\"token punctuation\">]</span> Result saved</code></pre></div>\n<p>And also file <code class=\"language-text\">results.txt</code> will be created with content:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">Adding <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span></code></pre></div>\n<p>If we provide not valid input for add:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> add <span class=\"token number\">2</span> asf\n\n<span class=\"token punctuation\">[</span><span class=\"token time number\">23:13:35</span> <span class=\"token level error important\">ERR</span><span class=\"token punctuation\">]</span> <span class=\"token property\">Error happened:</span> Second argument asf is not a number</code></pre></div>\n<p>And if we provide command, that does not exist program will return an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">$</span><span class=\"token operator\">:</span> dotnet run <span class=\"token operator\">-</span><span class=\"token operator\">-</span> subtract <span class=\"token number\">2</span> <span class=\"token number\">2</span>\n\nSpecify <span class=\"token operator\">-</span><span class=\"token operator\">-</span>help for a list of available options and commands<span class=\"token punctuation\">.</span>\nUnhandled exception<span class=\"token punctuation\">.</span> Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>CommandLineUtils<span class=\"token punctuation\">.</span>CommandParsingException<span class=\"token operator\">:</span> Unrecognized command or argument <span class=\"token string\">'subtract'</span>\n   at Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>CommandLineUtils<span class=\"token punctuation\">.</span>CommandLineApplication<span class=\"token punctuation\">.</span>Execute<span class=\"token operator\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token operator\">)</span>\n   at Program<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Main<span class=\"token operator\">></span><span class=\"token operator\">$</span><span class=\"token operator\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token operator\">)</span> in <span class=\"token file-path string\">./csharp-cli-app/CLI/Program.cs</span><span class=\"token operator\">:</span>line <span class=\"token number\">78</span></code></pre></div>","frontmatter":{"title":"Creating C# CLI App","date":"March 27, 2022","description":"Simple example of C# CLI application with Microsoft.Extensions.CommandLineUtils, MediatR and Serilog"}},"previous":{"fields":{"slug":"/javascript/js-dom/"},"frontmatter":{"title":"JS - DOM"}},"next":{"fields":{"slug":"/csharp/exception-handling-gidelines/"},"frontmatter":{"title":"C# Exception Handling"}}},"pageContext":{"id":"a5786029-4d28-5cff-8670-701e9decec0f","previousPostId":"d6369b77-666f-5b05-9dc0-83895c94c26b","nextPostId":"f0c28762-054a-5e30-9e8f-4381f9611b92"}},
    "staticQueryHashes": ["2063783301","2841359383","3274528899"]}